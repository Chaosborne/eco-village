import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import s from './OrderModal.module.scss';
import { useSelector } from 'react-redux';
import { RootState } from '../../../store/store';
import { clearCart } from '../../../store/slices/cartSlice';
import { useDispatch } from 'react-redux';

interface OrderModalProps {
  onClose: () => void;
}

const OrderModal = ({ onClose }: OrderModalProps) => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const cart = useSelector((state: RootState) => state.cart);
  const user = useSelector((state: RootState) => state.auth.user);

  const [formData, setFormData] = useState({
    name: user?.displayName || '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    email: user?.email || 'test@example.com',
    phone: '+7 (999) 123-45-67',
    address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 1',
    comment: '–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ø–æ–¥—ä–µ–∑–¥–∞, –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏. –ó–≤–æ–Ω–∏—Ç—å —Å 9:00 –¥–æ 18:00.'
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ // await —Å –ø—Ä–æ–º–∏—Å–æ–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 2000));

    setIsSubmitting(false);
    setIsSuccess(true);

    dispatch(clearCart());
  };

  const handleCloseSuccess = () => {
    onClose();
    setTimeout(() => navigate('/'), 1000);
  };

  return (
    <div className={s.overlay}>
      <div className={s.modal}>
        {!isSuccess && <button className={s.closeBtn} onClick={onClose}>√ó</button>}

        {!isSuccess ? (
          <>
            <h2 className={s.title}>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
            <div className={s.orderSummary}>
              <h3>–í–∞—à –∑–∞–∫–∞–∑:</h3>
              <p>–¢–æ–≤–∞—Ä–æ–≤: {cart.totalQuantity}</p>
              <p>–°—É–º–º–∞: {cart.totalPrice.toLocaleString('ru-RU')} ‚ÇΩ</p>
            </div>

            <div className={s.userInfo}>
              <p className={s.userInfoText}>
                {user ? '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è' : '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏'}
              </p>
            </div>

            <form className={s.form} onSubmit={handleSubmit}>
              <div className={s.formGroup}>
                <label htmlFor="name">–ò–º—è *</label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  required
                  readOnly
                  className={s.readOnlyInput}
                />
              </div>

              <div className={s.formGroup}>
                <label htmlFor="email">Email *</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  required
                  readOnly
                  className={s.readOnlyInput}
                />
              </div>

              <div className={s.formGroup}>
                <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  required
                  readOnly
                  className={s.readOnlyInput}
                />
              </div>

              <div className={s.formGroup}>
                <label htmlFor="address">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ *</label>
                <textarea
                  id="address"
                  name="address"
                  value={formData.address}
                  onChange={handleInputChange}
                  required
                  rows={3}
                  readOnly
                  className={s.readOnlyInput}
                />
              </div>

              <div className={s.formGroup}>
                <label htmlFor="comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</label>
                <textarea
                  id="comment"
                  name="comment"
                  value={formData.comment}
                  onChange={handleInputChange}
                  rows={2}
                  readOnly
                  className={s.readOnlyInput}
                />
              </div>

              <button
                type="submit"
                className={s.submitBtn}
                disabled={isSubmitting} // –ï—Å–ª–∏ –∏–Ω–ø—É—Ç—ã –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é
              >
                {isSubmitting ? '–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑'}
              </button>
            </form>
          </>
        ) : (
          <div className={s.success}>
            <h2>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üéâ</h2>
            <p>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{Math.random().toString(36).substring(2, 11).toUpperCase()}</p>
            <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</p>
            <button className={s.closeSuccessBtn} onClick={handleCloseSuccess}>
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default OrderModal; 